#librairie docx : pip install python-docx
#librairie docx2pdf : pip install docx2pdf
#importe os pour renommer le fichier word
#import librairy for time sleep

import os
import time
import json
from docx.shared import RGBColor
from docx import Document
from docx2pdf import convert
from docx.enum.text import WD_ALIGN_PARAGRAPH
from docx.oxml import OxmlElement
from docx.oxml.ns import qn
from docx.shared import Pt

# Specify the file paths
json_file_path = "C:/Users/Arnaud/Documents/PFE/PFE/test.json"
word_file_path = "C:/Users/Arnaud/Documents/PFE/PFE/rapport_pentest.docx"
modified_word_file_path = "C:/Users/Arnaud/Documents/PFE/PFE/rapport_pentest_modified.docx"
pdf_file_path = "C:/Users/Arnaud/Documents/PFE/PFE/rapport_pentest.pdf"

# Open the JSON file
with open(json_file_path, "r", encoding='utf-8') as json_file:
    # Load the JSON data
    data = json.load(json_file)

# Open the Word document
doc = Document(word_file_path)

# Pour les bordures des tableaux
def set_cell_border(cell, border_name):
    """ Définir une bordure pour une cellule donnée """
    tc = cell._tc
    tcPr = tc.get_or_add_tcPr()

    # Créer l'élément de bordure
    new_border = OxmlElement('w:' + border_name)
    new_border.set(qn('w:val'), 'single')
    new_border.set(qn('w:sz'), '5')  # Taille de la bordure
    new_border.set(qn('w:space'), '0')  # Espace entre le bord et le texte
    new_border.set(qn('w:color'), 'auto')  # Couleur de la bordure

    tcPr.append(new_border)

# Placer les tableaux aux bons endroits
def move_table_to_placeholder(document, placeholder, table):
    for paragraph in document.paragraphs:
        if placeholder in paragraph.text:
            # Déplacer le tableau à cet emplacement
            p = paragraph._element
            tbl = table._element
            p.addnext(tbl)
            # Supprimer le placeholder
            paragraph.clear()
            break

# #wait for 3 secs
# time.sleep(3)

# print(data)

# #wait for 3 secs
# time.sleep(3)


for paragraph in doc.paragraphs:
    if '{{site}}' in paragraph.text:
        paragraph.text = paragraph.text.replace('{{site}}', data['synthese']['site'])
    elif '{{services_releves}}' in paragraph.text:
        if str(data['synthese']['services_releves']) == True:
            paragraph.text = paragraph.text.replace('{{services_releves}}', 'Nous avons relevé des services sur le site.')
        else:
            paragraph.text = paragraph.text.replace('{{services_releves}}', 'Nous n\'avons pas relevé de services sur le site.')
        # paragraph.text = paragraph.text.replace('{{services_releves}}', str(data['synthese']['services_releves']))
    elif '{{services_obsoletes}}' in paragraph.text:
        if data['synthese']['services_obsoletes'] == True:
            paragraph.text = paragraph.text.replace('{{services_obsoletes}}', 'Il existe des services obsolètes sur le site.')
        else:
            paragraph.text = paragraph.text.replace('{{services_obsoletes}}', 'Il n\'existe pas de services obsolètes sur le site.')

        # paragraph.text = paragraph.text.replace('{{services_obsoletes}}', 'Nous avons relevé des services obsolètes sur le site.')
        paragraph.text = paragraph.text.replace('{{services_obsoletes}}', str(data['synthese']['services_obsoletes']))
    elif '{{pocs_publics_releves}}' in paragraph.text:
        if data['synthese']['pocs_publics_releves'] == True:
            paragraph.text = paragraph.text.replace('{{pocs_publics_releves}}', 'Nous avons relevé des PoCs publics sur le site.')
        else:
            paragraph.text = paragraph.text.replace('{{pocs_publics_releves}}', 'Nous n\'avons pas relevé de PoCs publics sur le site.')

        # paragraph.text = paragraph.text.replace('{{pocs_publics_releves}}', str(data['synthese']['pocs_publics_releves']))
    elif '{{vulnerabilite_connue_validee}}' in paragraph.text:
        if data['synthese']['vulnerabilite_connue_validee'] == True:
            paragraph.text = paragraph.text.replace('{{vulnerabilite_connue_validee}}', 'Nous avons validé une vulnérabilité connue sur le site.')
        else:
            paragraph.text = paragraph.text.replace('{{vulnerabilite_connue_validee}}', 'Nous n\'avons pas validé de vulnérabilité connue sur le site.')

        # paragraph.text = paragraph.text.replace('{{vulnerabilite_connue_validee}}', str(data['synthese']['vulnerabilite_connue_validee']))
    elif '{{cms_releve}}' in paragraph.text:
        if data['synthese']['cms_releve'] == True:
            paragraph.text = paragraph.text.replace('{{cms_releve}}', 'Nous avons relevé un CMS sur le site.')
        else:
            paragraph.text = paragraph.text.replace('{{cms_releve}}', 'Nous n\'avons pas relevé de CMS sur le site.')
            
        # paragraph.text = paragraph.text.replace('{{cms_releve}}', str(data['synthese']['cms_releve']))
    elif '{{port_ssh_trouve}}' in paragraph.text:
        if data['synthese']['port_ssh_trouve'] == True:
            paragraph.text = paragraph.text.replace('{{port_ssh_trouve}}', 'Nous avons trouvé un port SSH sur le site.')
        else:
            paragraph.text = paragraph.text.replace('{{port_ssh_trouve}}', 'Nous n\'avons pas trouvé de port SSH sur le site.')
            
        # paragraph.text = paragraph.text.replace('{{port_ssh_trouve}}', str(data['synthese']['port_ssh_trouve']))
    elif '{{connection_ssh_securisee}}' in paragraph.text:
        if data['synthese']['connection_ssh_securisee'] == True:
            paragraph.text = paragraph.text.replace('{{connection_ssh_securisee}}', 'La connexion SSH est sécurisée.')
        else:
            paragraph.text = paragraph.text.replace('{{connection_ssh_securisee}}', 'La connexion SSH n\'est pas sécurisée.')

        # paragraph.text = paragraph.text.replace('{{connection_ssh_securisee}}', str(data['synthese']['connection_ssh_securisee']))

# FIN SYNTHÈSE
            
    # elif '{{titre}}' in paragraph.text:
    #     paragraph.text = paragraph.text.replace('{{titre}}', str(data['cve_testees_validees'][0]['titre']))
    # elif '{{cve}}' in paragraph.text:
    #     paragraph.text = paragraph.text.replace('{{cve}}', str(data['cve_testees_validees'][0]['cve']))
    # elif '{{categorie_owasp}}' in paragraph.text:
    #     paragraph.text = paragraph.text.replace('{{categorie_owasp}}', str(data['cve_testees_validees'][0]['categorie_owasp']))
    # elif '{{description}}' in paragraph.text:
    #     paragraph.text = paragraph.text.replace('{{description}}', str(data['cve_testees_validees'][0]['description']))
    # elif '{{risque}}' in paragraph.text:
    #     paragraph.text = paragraph.text.replace('{{risque}}', str(data['cve_testees_validees'][0]['risque']))
    # elif '{{remediation}}' in paragraph.text:
    #     paragraph.text = paragraph.text.replace('{{remediation}}', str(data['cve_testees_validees'][0]['remediation']))

# DEBUT TABLEAU CVE TESTEES VALIDEES
            
table1 = doc.add_table(rows=1, cols=6)

# Ajouter les en-têtes de colonnes
hdr_cells = table1.rows[0].cells
hdr_cells[0].text = 'Titre'
hdr_cells[1].text = 'CVE'
hdr_cells[2].text = 'Catégorie OWASP'
hdr_cells[3].text = 'Description'
hdr_cells[4].text = 'Risque'
hdr_cells[5].text = 'Remédiation'


# Remplir le tableau avec les données de scan
for scan in data['cve_testees_validees']:
    row_cells = table1.add_row().cells
    row_cells[0].text = scan['titre']
    row_cells[1].text = scan['cve']
    row_cells[2].text = scan['categorie_owasp']
    row_cells[3].text = scan['description']
    row_cells[4].text = scan['risque']
    row_cells[5].text = scan['remediation']

# Ajouter les bordures à chaque cellule
for row in table1.rows:
    for cell in row.cells:
        for border in ["top", "left", "bottom", "right"]:
            set_cell_border(cell, border)

# ADD PARAGRAPH
doc.add_paragraph()
doc.add_paragraph()
doc.add_paragraph()
# FIN TABLEAU CVE TESTEES VALIDEES
    
    
for paragraph in doc.paragraphs:
    if '{{pages_admin}}' in paragraph.text:
        pages_admin_urls = ', '.join(data['tests_effectues']['dirscan']['urls_relevees']['pages_admin'])
        paragraph.text = paragraph.text.replace('{{pages_admin}}', pages_admin_urls)
    elif '{{pages_connexion}}' in paragraph.text:
        pages_connexion_urls = ', '.join(data['tests_effectues']['dirscan']['urls_relevees']['pages_connexion'])
        paragraph.text = paragraph.text.replace('{{pages_connexion}}', pages_connexion_urls)
    elif '{{pages_connexion}}' in paragraph.text:
        pages_connexion_urls = ', '.join(data['tests_effectues']['dirscan']['urls_relevees']['pages_connexion'])
        paragraph.text = paragraph.text.replace('{{pages_connexion}}', pages_connexion_urls)
    elif '{{pages_backup}}' in paragraph.text:
        pages_backup_urls = ', '.join(data['tests_effectues']['dirscan']['urls_relevees']['pages_backup'])
        paragraph.text = paragraph.text.replace('{{pages_backup}}', pages_backup_urls)
    elif '{{pages_api}}' in paragraph.text:
        pages_api_urls = ', '.join(data['tests_effectues']['dirscan']['urls_relevees']['pages_api'])
        paragraph.text = paragraph.text.replace('{{pages_api}}', pages_api_urls)
    elif '{{pages_donnees_txt}}' in paragraph.text:
        pages_donnees_txt_urls = ', '.join(data['tests_effectues']['dirscan']['urls_relevees']['pages_donnees_txt'])
        paragraph.text = paragraph.text.replace('{{pages_donnees_txt}}', pages_donnees_txt_urls)
    elif '{{pages_dev}}' in paragraph.text:
        pages_dev_urls = ', '.join(data['tests_effectues']['dirscan']['urls_relevees']['pages_dev'])
        paragraph.text = paragraph.text.replace('{{pages_dev}}', pages_dev_urls)

# FIN DIRSCAN

    # elif '{{port}}' in paragraph.text:
    #     port = data['tests_effectues']['scan_nmap'][0]['port']
    #     paragraph.text = paragraph.text.replace('{{port}}', str(port))
    # elif '{{nom_service}}' in paragraph.text:
    #     nom_service = data['tests_effectues']['scan_nmap'][0]['nom_service']
    #     paragraph.text = paragraph.text.replace('{{nom_service}}', str(nom_service))
    # elif '{{version}}' in paragraph.text:
    #     version = data['tests_effectues']['scan_nmap'][0]['version']
    #     paragraph.text = paragraph.text.replace('{{version}}', str(version))
    
# DEBUT TABLEAU SCAN NMAP

table2 = doc.add_table(rows=1, cols=3)

# Ajouter les en-têtes de colonnes
hdr_cells = table2.rows[0].cells
hdr_cells[0].text = 'Port'
hdr_cells[1].text = 'Nom du Service'
hdr_cells[2].text = 'Version'

# Remplir le tableau avec les données de scan
for scan in data['tests_effectues']['scan_nmap']:
    row_cells = table2.add_row().cells
    row_cells[0].text = str(scan['port'])
    row_cells[1].text = scan['nom_service']
    row_cells[2].text = scan['version']

# Ajouter les bordures à chaque cellule
for row in table2.rows:
    for cell in row.cells:
        for border in ["top", "left", "bottom", "right"]:
            set_cell_border(cell, border)

# ADD PARAGRAPH
doc.add_paragraph()
doc.add_paragraph()
doc.add_paragraph()
# FIN TABLEAU SCAN NMAP

    # elif '{{nom}}' in paragraph.text:
    #     nom = data['tests_effectues']['services_obsoletes'][0]['nom']
    #     paragraph.text = paragraph.text.replace('{{nom}}', str(nom))
    # elif '{{version}}' in paragraph.text:
    #     version = data['tests_effectues']['services_obsoletes'][0]['version']
    #     paragraph.text = paragraph.text.replace('{{version}}', str(version))
    # elif '{{nombre_cve}}' in paragraph.text:
    #     nombre_cve = data['tests_effectues']['services_obsoletes'][0]['nombre_cve']
    #     paragraph.text = paragraph.text.replace('{{nombre_cve}}', str(nombre_cve))
    # elif '{{nombre_pocs_publics}}' in paragraph.text:
    #     nombre_pocs_publics = data['tests_effectues']['services_obsoletes'][0]['nombre_pocs_publics']
    #     paragraph.text = paragraph.text.replace('{{nombre_pocs_publics}}', str(nombre_pocs_publics))
    # elif '{{urls_pocs_publics}}' in paragraph.text:
    #     urls_pocs_publics = ', '.join(data['tests_effectues']['services_obsoletes'][0]['urls_pocs_publics'])
    #     paragraph.text = paragraph.text.replace('{{urls_pocs_publics}}', str(urls_pocs_publics))
    

# DEBUT TABLEAU SERVICES OBSOLETES
    
table3 = doc.add_table(rows=1, cols=5)

# Ajouter les en-têtes de colonnes
hdr_cells = table3.rows[0].cells
hdr_cells[0].text = 'Nom'
hdr_cells[1].text = 'Version'
hdr_cells[2].text = 'Nombre de CVEs'
hdr_cells[3].text = 'Nombre de PoCs publics'
hdr_cells[4].text = 'URLs PoCs publics'

# Remplir le tableau avec les données de scan
for scan in data['tests_effectues']['services_obsoletes']:
    row_cells = table3.add_row().cells
    row_cells[0].text = scan['nom']
    row_cells[1].text = scan['version']
    row_cells[2].text = str(scan['nombre_cve'])
    row_cells[3].text = str(scan['nombre_pocs_publics'])
    row_cells[4].text = ', '.join(scan['urls_pocs_publics'])

# Ajouter les bordures à chaque cellule
for row in table3.rows:
    for cell in row.cells:
        for border in ["top", "left", "bottom", "right"]:
            set_cell_border(cell, border)

# ADD PARAGRAPH
doc.add_paragraph()
doc.add_paragraph()
doc.add_paragraph()
# FIN TABLEAU SERVICES OBSOLETES


for paragraph in doc.paragraphs:
    if '{{cms_nom}}' in paragraph.text:
        paragraph.text = paragraph.text.replace('{{cms_nom}}', data['tests_effectues']['cms']['nom'])
    elif '{{cms_version}}' in paragraph.text:
        paragraph.text = paragraph.text.replace('{{cms_version}}', data['tests_effectues']['cms']['version'])
    elif '{{nombre_cve}}' in paragraph.text:
        paragraph.text = paragraph.text.replace('{{nombre_cve}}', str(data['tests_effectues']['cms']['nombre_cve']))
    elif '{{nombre_pocs_publics}}' in paragraph.text:
        paragraph.text = paragraph.text.replace('{{nombre_pocs_publics}}', str(data['tests_effectues']['cms']['nombre_pocs_publics']))
    elif '{{urls_pocs_publics}}' in paragraph.text:
        urls_pocs_publics_text = ', '.join(data['tests_effectues']['cms']['urls_pocs_publics'])
        paragraph.text = paragraph.text.replace('{{urls_pocs_publics}}', urls_pocs_publics_text)

# DEBUT TABLEAU THEMES
        
    # elif '{{themes}}' in paragraph.text:
    #     themes_descriptions = [
    #         f"{theme['nom']} (Version {theme['version']}, CVEs: {', '.join(theme['cves'])})"
    #         for theme in data['tests_effectues']['cms']['themes']
    #     ]
    #     themes_text = '; '.join(themes_descriptions)
    #     paragraph.text = paragraph.text.replace('{{themes}}', themes_text)
        
table4 = doc.add_table(rows=1, cols=3)

# Ajouter les en-têtes de colonnes
hdr_cells = table4.rows[0].cells
hdr_cells[0].text = 'Nom'
hdr_cells[1].text = 'Version'
hdr_cells[2].text = 'CVEs'

# Remplir le tableau avec les données de scan
for scan in data['tests_effectues']['cms']['themes']:
    row_cells = table4.add_row().cells
    row_cells[0].text = scan['nom']
    row_cells[1].text = scan['version']
    row_cells[2].text = ', '.join(scan['cves'])

# Ajouter les bordures à chaque cellule
for row in table4.rows:
    for cell in row.cells:
        for border in ["top", "left", "bottom", "right"]:
            set_cell_border(cell, border)

# ADD PARAGRAPH
doc.add_paragraph()
doc.add_paragraph()
doc.add_paragraph()
# FIN TABLEAU THEMES
    
# DEBUT TABLEAU PLUGINS

    # elif '{{plugins}}' in paragraph.text:
    #     plugins_descriptions = [
    #         f"{plugin['nom']} (Version {plugin['version']}, CVEs: {', '.join(plugin['cves'])})"
    #         for plugin in data['tests_effectues']['cms']['plugins']
    #     ]
    #     plugins_text = '; '.join(plugins_descriptions)
    #     paragraph.text = paragraph.text.replace('{{plugins}}', plugins_text)

    # elif '{{utilisateurs_releves}}' in paragraph.text:
    #     utilisateurs_text = ', '.join(data['tests_effectues']['cms']['utilisateurs_releves'])
    #     paragraph.text = paragraph.text.replace('{{utilisateurs_releves}}', utilisateurs_text)
   

table5 = doc.add_table(rows=1, cols=3)

# Ajouter les en-têtes de colonnes
hdr_cells = table5.rows[0].cells
hdr_cells[0].text = 'Nom'
hdr_cells[1].text = 'Version'
hdr_cells[2].text = 'CVEs'

# Remplir le tableau avec les données de scan
for scan in data['tests_effectues']['cms']['plugins']:
    row_cells = table5.add_row().cells
    row_cells[0].text = scan['nom']
    row_cells[1].text = scan['version']
    row_cells[2].text = ', '.join(scan['cves'])

# Ajouter les bordures à chaque cellule
for row in table5.rows:
    for cell in row.cells:
        for border in ["top", "left", "bottom", "right"]:
            set_cell_border(cell, border)

# ADD PARAGRAPH
doc.add_paragraph()
# FIN TABLEAU PLUGINS
    
# DEBUT TABLEAU UTILISATEURS RELEVES
    
table6 = doc.add_table(rows=1, cols=1)

# Ajouter les en-têtes de colonnes
hdr_cells = table6.rows[0].cells
hdr_cells[0].text = 'Utilisateurs'

# Remplir le tableau avec les données de scan
for scan in data['tests_effectues']['cms']['utilisateurs_releves']:
    row_cells = table6.add_row().cells
    row_cells[0].text = scan

# Ajouter les bordures à chaque cellule
for row in table6.rows:
    for cell in row.cells:
        for border in ["top", "left", "bottom", "right"]:
            set_cell_border(cell, border)
# ADD PARAGRAPH
doc.add_paragraph()
# FIN TABLEAU UTILISATEURS RELEVES


for paragraph in doc.paragraphs:
    if '{{ssh_nomService}}' in paragraph.text:
        paragraph.text = paragraph.text.replace('{{ssh_nomService}}', data['tests_effectues']['ssh']['nomService'])
    elif '{{ssh_version}}' in paragraph.text:
        paragraph.text = paragraph.text.replace('{{ssh_version}}', data['tests_effectues']['ssh']['version'])
    elif '{{ssh_rootDisable}}' in paragraph.text:
        root_disable_text = 'Désactivé' if data['tests_effectues']['ssh']['rootDisable'] else 'Activé'
        paragraph.text = paragraph.text.replace('{{ssh_rootDisable}}', root_disable_text)
    elif '{{ssh_passwordConnexion}}' in paragraph.text:
        password_connexion_text = 'Oui' if data['tests_effectues']['ssh']['passwordConnexion'] else 'Non'
        paragraph.text = paragraph.text.replace('{{ssh_passwordConnexion}}', password_connexion_text)
    elif '{{ssh_fail2ban}}' in paragraph.text:
        fail2ban_text = 'Oui' if data['tests_effectues']['ssh']['fail2ban'] else 'Non'
        paragraph.text = paragraph.text.replace('{{ssh_fail2ban}}', fail2ban_text)
    

# # Fonction pour ajouter et centrer le texte dans une cellule de tableau
# def add_and_center_text(cell, text):
#     cell.text = text
#     for paragraph in cell.paragraphs:
#         paragraph.alignment = WD_ALIGN_PARAGRAPH.CENTER

# tableaux
    cms_data = data['tests_effectues']['cms']
    table = doc.tables[0]

    table.cell(1, 0).text = cms_data['nom']
    table.cell(1, 1).text = cms_data['version']
    table.cell(1, 2).text = str(cms_data['nombre_cve'])
    table.cell(1, 3).text = str(cms_data['nombre_pocs_publics'])
    table.cell(1, 4).text = ', '.join(cms_data['urls_pocs_publics'])

    # cms_data_themes = cms_data['themes']
    # table1 = doc.tables[1]

    # table1.cell(1, 0).text = cms_data_themes[0]['nom']
    # table1.cell(1, 1).text = cms_data_themes[0]['version']
    # table1.cell(1, 2).text = ', '.join(cms_data_themes[0]['cves'])


    # cms_data_plugins = cms_data['plugins']
    # table2 = doc.tables[2]

    # table2.cell(1, 0).text = cms_data_plugins[0]['nom']
    # table2.cell(1, 1).text = cms_data_plugins[0]['version']
    # table2.cell(1, 2).text = ', '.join(cms_data_plugins[0]['cves'])


    # cms_data_utilisateurs = cms_data['utilisateurs_releves']
    # table3 = doc.tables[3]

    # table3.cell(0, 1).text = cms_data_utilisateurs[0]

    ssh_data = data['tests_effectues']['ssh']
    table7 = doc.tables[1]

    table7.cell(1, 0).text = ssh_data['nomService']
    table7.cell(1, 1).text = ssh_data['version']
    table7.cell(1, 2).text = 'Désactivé' if ssh_data['rootDisable'] else 'Activé'
    table7.cell(1, 3).text = 'Oui' if ssh_data['passwordConnexion'] else 'Non'
    table7.cell(1, 4).text = 'Oui' if ssh_data['fail2ban'] else 'Non'




# center all cells in table[0] to table[4]
for table in doc.tables:
    for row in table.rows:
        for cell in row.cells:
            for paragraph in cell.paragraphs:
                paragraph.alignment = WD_ALIGN_PARAGRAPH.CENTER


# Ajouter les bordures à chaque cellule
for row in table.rows:
    for cell in row.cells:
        for border in ["top", "left", "bottom", "right"]:
            set_cell_border(cell, border)

# Mettre en gras et en blanc la première rangée de chaque tableau
for table in doc.tables:
    for cell in table.rows[0].cells:
        for paragraph in cell.paragraphs:
            for run in paragraph.runs:
                run.font.bold = True
                run.font.color.rgb = RGBColor(255, 255, 255)

# Définir la couleur de fond de la première rangée de chaque tableau en noir
for table in doc.tables:
    for cell in table.rows[0].cells:
        shading_elm = OxmlElement('w:shd')
        shading_elm.set(qn('w:fill'), '7FA5F9')
        cell._tc.get_or_add_tcPr().append(shading_elm)


# Déplacer table1 au placeholder spécifié
move_table_to_placeholder(doc, '{{insert_table_here_1}}', table1)
# Déplacer table2 au placeholder spécifié
move_table_to_placeholder(doc, '{{insert_table_here_2}}', table2)
# Déplacer table3 au placeholder spécifié
move_table_to_placeholder(doc, '{{insert_table_here_3}}', table3)
# Déplacer table4 au placeholder spécifié
move_table_to_placeholder(doc, '{{insert_table_here_4}}', table4)
# Déplacer table5 au placeholder spécifié
move_table_to_placeholder(doc, '{{insert_table_here_5}}', table5)
# Déplacer table6 au placeholder spécifié
move_table_to_placeholder(doc, '{{insert_table_here_6}}', table6)





# Save the modified Word document
doc.save(modified_word_file_path)

#print "i finished completing the word document" and wait for three seconds
print("DOCX file has been modified")
time.sleep(1)



################################################################################


# Chemin de base pour le fichier
base_path = 'C:/Users/Arnaud/Documents/PFE/PFE/'

# Nom de base du fichier sans numéro
base_file_name = data['synthese']['site'] + "_rapport_pentest"

# Extension de fichier
file_extension = '.docx'

# Initialiser le compteur
counter = 1

# Construire le chemin complet du fichier
full_file_path = os.path.join(base_path, base_file_name + file_extension)

# Vérifier si le fichier existe et incrémenter le compteur jusqu'à ce qu'un nom disponible soit trouvé
while os.path.exists(full_file_path):
    full_file_path = os.path.join(base_path, f"{base_file_name}_{counter}{file_extension}")
    counter += 1

time.sleep(2)

# Renommer le fichier
os.rename(modified_word_file_path, full_file_path)

################################################################################

# # change the name of the word document with "site name" + "_rapport_pentest.docx" et si le fichier existe deja, le remplacer
# os.rename(modified_word_file_path, data['synthese']['site'] + "_rapport_pentest.docx")

print("DOCX file has been renamed")



#PROBLEME: LE NOM DU FICHIER PDF NE CHANGE PAS, A REGLER

# demander a l'utilisateur si il veut convertir le fichier en pdf
convert_to_pdf = input("Do you want to convert the word document to pdf? (y/n): ")

# Si l'utilisateur veut convertir le fichier en pdf
if convert_to_pdf.lower() == "y":
    # Convert the Word document to PDF
    convert(full_file_path, pdf_file_path)
    print("DOCX file has been converted to pdf")
else:
    print("DOCX file has not been converted to pdf")











