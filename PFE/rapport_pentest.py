#librairie docx : pip install python-docx
#librairie docx2pdf : pip install docx2pdf
#importe os pour renommer le fichier word
#import librairy for time sleep

import os
import time
import json
from docx import Document
from docx2pdf import convert
from docx.enum.text import WD_ALIGN_PARAGRAPH

# Specify the file paths
json_file_path = "C:/Users/Arnaud/Documents/PFE/PFE/test.json"
word_file_path = "C:/Users/Arnaud/Documents/PFE/PFE/rapport_pentest.docx"
modified_word_file_path = "C:/Users/Arnaud/Documents/PFE/PFE/rapport_pentest_modified.docx"
pdf_file_path = "C:/Users/Arnaud/Documents/PFE/PFE/rapport_pentest.pdf"

# Open the JSON file
with open(json_file_path, "r", encoding='utf-8') as json_file:
    # Load the JSON data
    data = json.load(json_file)

# Open the Word document
doc = Document(word_file_path)

# #wait for 3 secs
# time.sleep(3)

# print(data)

# #wait for 3 secs
# time.sleep(3)


# Avoir accès a différents éléments du fichier json

for paragraph in doc.paragraphs:
    if '{{site}}' in paragraph.text:
        paragraph.text = paragraph.text.replace('{{site}}', data['synthese']['site'])
    elif '{{services_releves}}' in paragraph.text:
        if str(data['synthese']['services_releves']) == True:
            paragraph.text = paragraph.text.replace('{{services_releves}}', 'Nous avons relevé des services sur le site.')
        else:
            paragraph.text = paragraph.text.replace('{{services_releves}}', 'Nous n\'avons pas relevé de services sur le site.')
        # paragraph.text = paragraph.text.replace('{{services_releves}}', str(data['synthese']['services_releves']))
    elif '{{services_obsoletes}}' in paragraph.text:
        if data['synthese']['services_obsoletes'] == True:
            paragraph.text = paragraph.text.replace('{{services_obsoletes}}', 'Il existe des services obsolètes sur le site.')
        else:
            paragraph.text = paragraph.text.replace('{{services_obsoletes}}', 'Il n\'existe pas de services obsolètes sur le site.')

        # paragraph.text = paragraph.text.replace('{{services_obsoletes}}', 'Nous avons relevé des services obsolètes sur le site.')
        paragraph.text = paragraph.text.replace('{{services_obsoletes}}', str(data['synthese']['services_obsoletes']))
    elif '{{pocs_publics_releves}}' in paragraph.text:
        if data['synthese']['pocs_publics_releves'] == True:
            paragraph.text = paragraph.text.replace('{{pocs_publics_releves}}', 'Nous avons relevé des PoCs publics sur le site.')
        else:
            paragraph.text = paragraph.text.replace('{{pocs_publics_releves}}', 'Nous n\'avons pas relevé de PoCs publics sur le site.')

        # paragraph.text = paragraph.text.replace('{{pocs_publics_releves}}', str(data['synthese']['pocs_publics_releves']))
    elif '{{vulnerabilite_connue_validee}}' in paragraph.text:
        if data['synthese']['vulnerabilite_connue_validee'] == True:
            paragraph.text = paragraph.text.replace('{{vulnerabilite_connue_validee}}', 'Nous avons validé une vulnérabilité connue sur le site.')
        else:
            paragraph.text = paragraph.text.replace('{{vulnerabilite_connue_validee}}', 'Nous n\'avons pas validé de vulnérabilité connue sur le site.')

        # paragraph.text = paragraph.text.replace('{{vulnerabilite_connue_validee}}', str(data['synthese']['vulnerabilite_connue_validee']))
    elif '{{cms_releve}}' in paragraph.text:
        if data['synthese']['cms_releve'] == True:
            paragraph.text = paragraph.text.replace('{{cms_releve}}', 'Nous avons relevé un CMS sur le site.')
        else:
            paragraph.text = paragraph.text.replace('{{cms_releve}}', 'Nous n\'avons pas relevé de CMS sur le site.')
            
        # paragraph.text = paragraph.text.replace('{{cms_releve}}', str(data['synthese']['cms_releve']))
    elif '{{port_ssh_trouve}}' in paragraph.text:
        if data['synthese']['port_ssh_trouve'] == True:
            paragraph.text = paragraph.text.replace('{{port_ssh_trouve}}', 'Nous avons trouvé un port SSH sur le site.')
        else:
            paragraph.text = paragraph.text.replace('{{port_ssh_trouve}}', 'Nous n\'avons pas trouvé de port SSH sur le site.')
            
        # paragraph.text = paragraph.text.replace('{{port_ssh_trouve}}', str(data['synthese']['port_ssh_trouve']))
    elif '{{connection_ssh_securisee}}' in paragraph.text:
        if data['synthese']['connection_ssh_securisee'] == True:
            paragraph.text = paragraph.text.replace('{{connection_ssh_securisee}}', 'La connexion SSH est sécurisée.')
        else:
            paragraph.text = paragraph.text.replace('{{connection_ssh_securisee}}', 'La connexion SSH n\'est pas sécurisée.')

        # paragraph.text = paragraph.text.replace('{{connection_ssh_securisee}}', str(data['synthese']['connection_ssh_securisee']))
    elif '{{titre}}' in paragraph.text:
        paragraph.text = paragraph.text.replace('{{titre}}', str(data['cve_testees_validees'][0]['titre']))
    elif '{{cve}}' in paragraph.text:
        paragraph.text = paragraph.text.replace('{{cve}}', str(data['cve_testees_validees'][0]['cve']))
    elif '{{categorie_owasp}}' in paragraph.text:
        paragraph.text = paragraph.text.replace('{{categorie_owasp}}', str(data['cve_testees_validees'][0]['categorie_owasp']))
    elif '{{description}}' in paragraph.text:
        paragraph.text = paragraph.text.replace('{{description}}', str(data['cve_testees_validees'][0]['description']))
    elif '{{risque}}' in paragraph.text:
        paragraph.text = paragraph.text.replace('{{risque}}', str(data['cve_testees_validees'][0]['risque']))
    elif '{{remediation}}' in paragraph.text:
        paragraph.text = paragraph.text.replace('{{remediation}}', str(data['cve_testees_validees'][0]['remediation']))


    elif '{{pages_admin}}' in paragraph.text:
        pages_admin_urls = ', '.join(data['tests_effectues']['dirscan']['urls_relevees']['pages_admin'])
        paragraph.text = paragraph.text.replace('{{pages_admin}}', pages_admin_urls)
    elif '{{pages_connexion}}' in paragraph.text:
        pages_connexion_urls = ', '.join(data['tests_effectues']['dirscan']['urls_relevees']['pages_connexion'])
        paragraph.text = paragraph.text.replace('{{pages_connexion}}', pages_connexion_urls)
    elif '{{pages_connexion}}' in paragraph.text:
        pages_connexion_urls = ', '.join(data['tests_effectues']['dirscan']['urls_relevees']['pages_connexion'])
        paragraph.text = paragraph.text.replace('{{pages_connexion}}', pages_connexion_urls)
    elif '{{pages_backup}}' in paragraph.text:
        pages_backup_urls = ', '.join(data['tests_effectues']['dirscan']['urls_relevees']['pages_backup'])
        paragraph.text = paragraph.text.replace('{{pages_backup}}', pages_backup_urls)
    elif '{{pages_api}}' in paragraph.text:
        pages_api_urls = ', '.join(data['tests_effectues']['dirscan']['urls_relevees']['pages_api'])
        paragraph.text = paragraph.text.replace('{{pages_api}}', pages_api_urls)
    elif '{{pages_donnees_txt}}' in paragraph.text:
        pages_donnees_txt_urls = ', '.join(data['tests_effectues']['dirscan']['urls_relevees']['pages_donnees_txt'])
        paragraph.text = paragraph.text.replace('{{pages_donnees_txt}}', pages_donnees_txt_urls)
    elif '{{pages_dev}}' in paragraph.text:
        pages_dev_urls = ', '.join(data['tests_effectues']['dirscan']['urls_relevees']['pages_dev'])
        paragraph.text = paragraph.text.replace('{{pages_dev}}', pages_dev_urls)
    

    elif '{{port}}' in paragraph.text:
        port = data['tests_effectues']['scan_nmap'][0]['port']
        paragraph.text = paragraph.text.replace('{{port}}', str(port))
    elif '{{nom_service}}' in paragraph.text:
        nom_service = data['tests_effectues']['scan_nmap'][0]['nom_service']
        paragraph.text = paragraph.text.replace('{{nom_service}}', str(nom_service))
    elif '{{version}}' in paragraph.text:
        version = data['tests_effectues']['scan_nmap'][0]['version']
        paragraph.text = paragraph.text.replace('{{version}}', str(version))
    elif '{{nom}}' in paragraph.text:
        nom = data['tests_effectues']['services_obsoletes'][0]['nom']
        paragraph.text = paragraph.text.replace('{{nom}}', str(nom))
    elif '{{version}}' in paragraph.text:
        version = data['tests_effectues']['services_obsoletes'][0]['version']
        paragraph.text = paragraph.text.replace('{{version}}', str(version))
    elif '{{nombre_cve}}' in paragraph.text:
        nombre_cve = data['tests_effectues']['services_obsoletes'][0]['nombre_cve']
        paragraph.text = paragraph.text.replace('{{nombre_cve}}', str(nombre_cve))
    elif '{{nombre_pocs_publics}}' in paragraph.text:
        nombre_pocs_publics = data['tests_effectues']['services_obsoletes'][0]['nombre_pocs_publics']
        paragraph.text = paragraph.text.replace('{{nombre_pocs_publics}}', str(nombre_pocs_publics))
    elif '{{urls_pocs_publics}}' in paragraph.text:
        urls_pocs_publics = ', '.join(data['tests_effectues']['services_obsoletes'][0]['urls_pocs_publics'])
        paragraph.text = paragraph.text.replace('{{urls_pocs_publics}}', str(urls_pocs_publics))
    
    elif '{{cms_nom}}' in paragraph.text:
        paragraph.text = paragraph.text.replace('{{cms_nom}}', data['tests_effectues']['cms']['nom'])
    elif '{{cms_version}}' in paragraph.text:
        paragraph.text = paragraph.text.replace('{{cms_version}}', data['tests_effectues']['cms']['version'])
    elif '{{nombre_cve}}' in paragraph.text:
        paragraph.text = paragraph.text.replace('{{nombre_cve}}', str(data['tests_effectues']['cms']['nombre_cve']))
    elif '{{nombre_pocs_publics}}' in paragraph.text:
        paragraph.text = paragraph.text.replace('{{nombre_pocs_publics}}', str(data['tests_effectues']['cms']['nombre_pocs_publics']))
    elif '{{urls_pocs_publics}}' in paragraph.text:
        urls_pocs_publics_text = ', '.join(data['tests_effectues']['cms']['urls_pocs_publics'])
        paragraph.text = paragraph.text.replace('{{urls_pocs_publics}}', urls_pocs_publics_text)
    elif '{{themes}}' in paragraph.text:
        themes_descriptions = [
            f"{theme['nom']} (Version {theme['version']}, CVEs: {', '.join(theme['cves'])})"
            for theme in data['tests_effectues']['cms']['themes']
        ]
        themes_text = '; '.join(themes_descriptions)
        paragraph.text = paragraph.text.replace('{{themes}}', themes_text)

    elif '{{plugins}}' in paragraph.text:
        plugins_descriptions = [
            f"{plugin['nom']} (Version {plugin['version']}, CVEs: {', '.join(plugin['cves'])})"
            for plugin in data['tests_effectues']['cms']['plugins']
        ]
        plugins_text = '; '.join(plugins_descriptions)
        paragraph.text = paragraph.text.replace('{{plugins}}', plugins_text)

    elif '{{utilisateurs_releves}}' in paragraph.text:
        utilisateurs_text = ', '.join(data['tests_effectues']['cms']['utilisateurs_releves'])
        paragraph.text = paragraph.text.replace('{{utilisateurs_releves}}', utilisateurs_text)
    
  
    elif '{{ssh_nomService}}' in paragraph.text:
        paragraph.text = paragraph.text.replace('{{ssh_nomService}}', data['tests_effectues']['ssh']['nomService'])
    elif '{{ssh_version}}' in paragraph.text:
        paragraph.text = paragraph.text.replace('{{ssh_version}}', data['tests_effectues']['ssh']['version'])
    elif '{{ssh_rootDisable}}' in paragraph.text:
        root_disable_text = 'Désactivé' if data['tests_effectues']['ssh']['rootDisable'] else 'Activé'
        paragraph.text = paragraph.text.replace('{{ssh_rootDisable}}', root_disable_text)
    elif '{{ssh_passwordConnexion}}' in paragraph.text:
        password_connexion_text = 'Oui' if data['tests_effectues']['ssh']['passwordConnexion'] else 'Non'
        paragraph.text = paragraph.text.replace('{{ssh_passwordConnexion}}', password_connexion_text)
    elif '{{ssh_fail2ban}}' in paragraph.text:
        fail2ban_text = 'Oui' if data['tests_effectues']['ssh']['fail2ban'] else 'Non'
        paragraph.text = paragraph.text.replace('{{ssh_fail2ban}}', fail2ban_text)


# # Fonction pour ajouter et centrer le texte dans une cellule de tableau
# def add_and_center_text(cell, text):
#     cell.text = text
#     for paragraph in cell.paragraphs:
#         paragraph.alignment = WD_ALIGN_PARAGRAPH.CENTER

# tableaux
    cms_data = data['tests_effectues']['cms']
    table = doc.tables[0]

    table.cell(1, 0).text = cms_data['nom']
    table.cell(1, 1).text = cms_data['version']
    table.cell(1, 2).text = str(cms_data['nombre_cve'])
    table.cell(1, 3).text = str(cms_data['nombre_pocs_publics'])
    table.cell(1, 4).text = ', '.join(cms_data['urls_pocs_publics'])

    cms_data_themes = cms_data['themes']
    table1 = doc.tables[1]

    table1.cell(1, 0).text = cms_data_themes[0]['nom']
    table1.cell(1, 1).text = cms_data_themes[0]['version']
    table1.cell(1, 2).text = ', '.join(cms_data_themes[0]['cves'])


    cms_data_plugins = cms_data['plugins']
    table2 = doc.tables[2]

    table2.cell(1, 0).text = cms_data_plugins[0]['nom']
    table2.cell(1, 1).text = cms_data_plugins[0]['version']
    table2.cell(1, 2).text = ', '.join(cms_data_plugins[0]['cves'])


    cms_data_utilisateurs = cms_data['utilisateurs_releves']
    table3 = doc.tables[3]

    table3.cell(0, 1).text = cms_data_utilisateurs[0]

    ssh_data = data['tests_effectues']['ssh']
    table4 = doc.tables[4]

    table4.cell(1, 0).text = ssh_data['nomService']
    table4.cell(1, 1).text = ssh_data['version']
    table4.cell(1, 2).text = 'Désactivé' if ssh_data['rootDisable'] else 'Activé'
    table4.cell(1, 3).text = 'Oui' if ssh_data['passwordConnexion'] else 'Non'
    table4.cell(1, 4).text = 'Oui' if ssh_data['fail2ban'] else 'Non'



# center all cells in table[0] to table[4]
for table in doc.tables:
    for row in table.rows:
        for cell in row.cells:
            for paragraph in cell.paragraphs:
                paragraph.alignment = WD_ALIGN_PARAGRAPH.CENTER

    


# Save the modified Word document
doc.save(modified_word_file_path)

#print "i finished completing the word document" and wait for three seconds
print("DOCX file has been modified")
time.sleep(1)



################################################################################


# Chemin de base pour le fichier
base_path = 'C:/Users/Arnaud/Documents/PFE/PFE/'

# Nom de base du fichier sans numéro
base_file_name = data['synthese']['site'] + "_rapport_pentest"

# Extension de fichier
file_extension = '.docx'

# Initialiser le compteur
counter = 1

# Construire le chemin complet du fichier
full_file_path = os.path.join(base_path, base_file_name + file_extension)

# Vérifier si le fichier existe et incrémenter le compteur jusqu'à ce qu'un nom disponible soit trouvé
while os.path.exists(full_file_path):
    full_file_path = os.path.join(base_path, f"{base_file_name}_{counter}{file_extension}")
    counter += 1

time.sleep(2)

# Renommer le fichier
os.rename(modified_word_file_path, full_file_path)

################################################################################

# # change the name of the word document with "site name" + "_rapport_pentest.docx" et si le fichier existe deja, le remplacer
# os.rename(modified_word_file_path, data['synthese']['site'] + "_rapport_pentest.docx")

print("DOCX file has been renamed")



#PROBLEME: LE NOM DU FICHIER PDF NE CHANGE PAS, A REGLER

# demander a l'utilisateur si il veut convertir le fichier en pdf
convert_to_pdf = input("Do you want to convert the word document to pdf? (y/n): ")

# Si l'utilisateur veut convertir le fichier en pdf
if convert_to_pdf.lower() == "y":
    # Convert the Word document to PDF
    convert(full_file_path, pdf_file_path)
    print("DOCX file has been converted to pdf")
else:
    print("DOCX file has not been converted to pdf")











